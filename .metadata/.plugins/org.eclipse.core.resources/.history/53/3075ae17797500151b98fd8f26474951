// This class is a container for different queues with gyroscope and accelerometer data
// Different threads can use this container therefore its methods are synchronized

import java.util.ArrayList;
import java.util.List;

public class QueuesHolder {
	public QueuesHolder( Logger _logger ) {
		logger = _logger;
		queuesList = new ArrayList<GyroDataQueue>();
	}
	
	public synchronized int AddNewQueue( GyroDataQueue newQueue ) {
		int indexOfAddedQueue = -1;
		if( queuesList != null && newQueue != null ) {
			queuesList.add(newQueue);
			indexOfAddedQueue = queuesList.size() - 1;
		} 
		return indexOfAddedQueue;
	}
	
	public synchronized void PushDataToQueues(int x, int y, int z) {
		if(queuesList != null) {
			try {
				for( int i = 0; i < queuesList.size(); ++i ) {
					logger.WriteLine("put element in queue #" + ( i + 1 ) + ": " + x + ", " + y + ", " + z);
					queuesList.get(i).Offer(x, y, z);
				}
			} catch( Exception e ) {
				logger.WriteLine(e.getMessage(), getClassName(), "PushDataToQueues" );
			}
		}
	}
	
	public synchronized void DeleteQueues() {
		if(queuesList != null) {
			try {
				logger.WriteLine("Queue #" + ( i + 1 ) + " is deleted " );
				queuesList.clear();
				
			} catch( Exception e ) {
				logger.WriteLine(e.getMessage(),getClassName(), "DeleteQueues" );
			}
		}
	}

	
	// -------- PRIVATE ---------------------
	private List<GyroDataQueue> queuesList = null;
	private Logger logger;
	
	private String getClassName() {
		return this.getClass().getName();
	}
}
