import java.io.IOException;
import java.io.OutputStream;
import java.net.Socket;
import java.util.concurrent.atomic.AtomicBoolean;
import java.lang.Thread;


public class Sender implements Runnable {

	public Sender(Socket _socket, Logger _logger, GyroDataQueue _dataQueue ) {
		socket = _socket;
		logger = _logger;
		dataQueue = _dataQueue;
		shouldSending.set(false);
	}

	public void run()		
	{
		logger.WriteLine("Hello from Sender thread!");
		shouldSending.set(true);
		startSending();	
	}
	
	public void StopSending() {
		shouldSending.set(false);
	}
	
	// -------- PRIVATE ---------------------
	private Logger logger;
	private Socket socket;
	private AtomicBoolean shouldSending;
	private GyroDataQueue dataQueue;

	private void startSending() {
		try {
			GyroDataQueue gyroDataQueue;
			logger.WriteLine("Server is started");
			int i = 0;
			TData data;
			String text;
			while(shouldSending.get()) {
				OutputStream os = socket.getOutputStream();
				data = gyroDataQueue.GetElement();
				if( data != null ) {
					text = data.getX() + ", " + data.getY() + ", " + data.getZ();
					os.write(text.getBytes());
					logger.WriteLine("GetElement " + data.getX() + ", " + data.getY() + ", " + data.getZ());
					logger.WriteLine("Text was sent!");	
				}
			}
		} catch(IOException e) {
			logger.WriteLine( "Sender IOException" + e.getMessage() );			
		} catch(Exception e) {			
			logger.WriteLine( e.getMessage() );
		}
	}
}
